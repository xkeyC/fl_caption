// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/text_util.dart';
import 'api/whisper.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'whisper_caption/whisper.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<List<Segment>> dco_decode_StreamSink_list_segment_Dco(
    dynamic raw,
  );

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  BigInt dco_decode_U128(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw);

  @protected
  WhisperClient dco_decode_box_autoadd_whisper_client(dynamic raw);

  @protected
  DecodingResult dco_decode_decoding_result(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Segment> dco_decode_list_segment(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw);

  @protected
  Segment dco_decode_segment(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  WhisperClient dco_decode_whisper_client(dynamic raw);

  @protected
  WhisperStatus dco_decode_whisper_status(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<List<Segment>> sse_decode_StreamSink_list_segment_Dco(
    SseDeserializer deserializer,
  );

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  WhisperClient sse_decode_box_autoadd_whisper_client(
    SseDeserializer deserializer,
  );

  @protected
  DecodingResult sse_decode_decoding_result(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Segment> sse_decode_list_segment(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  Segment sse_decode_segment(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  WhisperClient sse_decode_whisper_client(SseDeserializer deserializer);

  @protected
  WhisperStatus sse_decode_whisper_status(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(
    AnyhowException raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict>
  cst_encode_StreamSink_list_segment_Dco(RustStreamSink<List<Segment>> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(
      raw.setupAndSerialize(
        codec: DcoCodec(
          decodeSuccessData: dco_decode_list_segment,
          decodeErrorData: dco_decode_AnyhowException,
        ),
      ),
    );
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_U128(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.toString());
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_box_autoadd_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_bool(cst_encode_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_box_autoadd_f_32(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_f_32(cst_encode_f_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_box_autoadd_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_usize(cst_encode_usize(raw));
  }

  @protected
  ffi.Pointer<wire_cst_whisper_client> cst_encode_box_autoadd_whisper_client(
    WhisperClient raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_whisper_client();
    cst_api_fill_to_wire_whisper_client(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_32_strict> cst_encode_list_prim_u_32_strict(
    Uint32List raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_32_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
    List<int> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
    Uint8List raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_segment> cst_encode_list_segment(
    List<Segment> raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_segment(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_segment(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
    String? raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_U128(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_U128(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_opt_box_autoadd_bool(bool? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_opt_box_autoadd_f_32(double? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_opt_box_autoadd_usize(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_usize(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  int cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_whisper_client(
    WhisperClient apiObj,
    ffi.Pointer<wire_cst_whisper_client> wireObj,
  ) {
    cst_api_fill_to_wire_whisper_client(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_decoding_result(
    DecodingResult apiObj,
    wire_cst_decoding_result wireObj,
  ) {
    wireObj.tokens = cst_encode_list_prim_u_32_strict(apiObj.tokens);
    wireObj.text = cst_encode_String(apiObj.text);
    wireObj.avg_logprob = cst_encode_f_64(apiObj.avgLogprob);
    wireObj.no_speech_prob = cst_encode_f_64(apiObj.noSpeechProb);
    wireObj.temperature = cst_encode_f_64(apiObj.temperature);
    wireObj.compression_ratio = cst_encode_f_64(apiObj.compressionRatio);
  }

  @protected
  void cst_api_fill_to_wire_segment(Segment apiObj, wire_cst_segment wireObj) {
    wireObj.start = cst_encode_f_64(apiObj.start);
    wireObj.duration = cst_encode_f_64(apiObj.duration);
    cst_api_fill_to_wire_decoding_result(apiObj.dr, wireObj.dr);
    wireObj.reasoning_duration = cst_encode_opt_U128(apiObj.reasoningDuration);
    wireObj.reasoning_lang = cst_encode_opt_String(apiObj.reasoningLang);
    wireObj.audio_duration = cst_encode_opt_U128(apiObj.audioDuration);
    wireObj.status = cst_encode_whisper_status(apiObj.status);
  }

  @protected
  void cst_api_fill_to_wire_whisper_client(
    WhisperClient apiObj,
    wire_cst_whisper_client wireObj,
  ) {
    wireObj.whisper_model = cst_encode_String(apiObj.whisperModel);
    wireObj.whisper_config = cst_encode_String(apiObj.whisperConfig);
    wireObj.whisper_tokenizer = cst_encode_list_prim_u_8_strict(
      apiObj.whisperTokenizer,
    );
    wireObj.is_multilingual = cst_encode_bool(apiObj.isMultilingual);
    wireObj.is_quantized = cst_encode_bool(apiObj.isQuantized);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_whisper_status(WhisperStatus raw);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_StreamSink_list_segment_Dco(
    RustStreamSink<List<Segment>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_whisper_client(
    WhisperClient self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_decoding_result(
    DecodingResult self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_32_strict(
    Uint32List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_segment(List<Segment> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_usize(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_segment(Segment self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_whisper_client(WhisperClient self, SseSerializer serializer);

  @protected
  void sse_encode_whisper_status(WhisperStatus self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  void store_dart_post_cobject(DartPostCObjectFnType ptr) {
    return _store_dart_post_cobject(ptr);
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
        'store_dart_post_cobject',
      );
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr
          .asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__api__whisper__cancel_cancellation_token(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> token_id,
  ) {
    return _wire__crate__api__whisper__cancel_cancellation_token(
      port_,
      token_id,
    );
  }

  late final _wire__crate__api__whisper__cancel_cancellation_tokenPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
    >
  >('frbgen_fl_caption_wire__crate__api__whisper__cancel_cancellation_token');
  late final _wire__crate__api__whisper__cancel_cancellation_token =
      _wire__crate__api__whisper__cancel_cancellation_tokenPtr
          .asFunction<
            void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
          >();

  void wire__crate__api__text_util__count_duplicate_characters(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> input,
  ) {
    return _wire__crate__api__text_util__count_duplicate_characters(
      port_,
      input,
    );
  }

  late final _wire__crate__api__text_util__count_duplicate_charactersPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
    >
  >(
    'frbgen_fl_caption_wire__crate__api__text_util__count_duplicate_characters',
  );
  late final _wire__crate__api__text_util__count_duplicate_characters =
      _wire__crate__api__text_util__count_duplicate_charactersPtr
          .asFunction<
            void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)
          >();

  void wire__crate__api__whisper__create_cancellation_token(int port_) {
    return _wire__crate__api__whisper__create_cancellation_token(port_);
  }

  late final _wire__crate__api__whisper__create_cancellation_tokenPtr = _lookup<
    ffi.NativeFunction<ffi.Void Function(ffi.Int64)>
  >('frbgen_fl_caption_wire__crate__api__whisper__create_cancellation_token');
  late final _wire__crate__api__whisper__create_cancellation_token =
      _wire__crate__api__whisper__create_cancellation_tokenPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__whisper__launch_caption(
    int port_,
    ffi.Pointer<wire_cst_whisper_client> whisper_client,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> stream_sink,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> audio_device,
    ffi.Pointer<ffi.Bool> audio_device_is_input,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> audio_language,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> cancel_token_id,
    ffi.Pointer<ffi.Bool> with_timestamps,
    ffi.Pointer<ffi.Bool> verbose,
    ffi.Pointer<ffi.Bool> try_with_cuda,
    ffi.Pointer<ffi.Uint32> whisper_max_audio_duration,
    ffi.Pointer<ffi.Uint64> inference_interval,
    ffi.Pointer<ffi.UintPtr> whisper_default_max_decode_tokens,
    ffi.Pointer<ffi.Float> whisper_temperature,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> vad_model_path,
  ) {
    return _wire__crate__api__whisper__launch_caption(
      port_,
      whisper_client,
      stream_sink,
      audio_device,
      audio_device_is_input,
      audio_language,
      cancel_token_id,
      with_timestamps,
      verbose,
      try_with_cuda,
      whisper_max_audio_duration,
      inference_interval,
      whisper_default_max_decode_tokens,
      whisper_temperature,
      vad_model_path,
    );
  }

  late final _wire__crate__api__whisper__launch_captionPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Int64,
        ffi.Pointer<wire_cst_whisper_client>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<ffi.Bool>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<ffi.Bool>,
        ffi.Pointer<ffi.Bool>,
        ffi.Pointer<ffi.Bool>,
        ffi.Pointer<ffi.Uint32>,
        ffi.Pointer<ffi.Uint64>,
        ffi.Pointer<ffi.UintPtr>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
      )
    >
  >('frbgen_fl_caption_wire__crate__api__whisper__launch_caption');
  late final _wire__crate__api__whisper__launch_caption =
      _wire__crate__api__whisper__launch_captionPtr
          .asFunction<
            void Function(
              int,
              ffi.Pointer<wire_cst_whisper_client>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
            )
          >();

  void wire__crate__api__whisper__whisper_client_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> whisper_model,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> whisper_config,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> whisper_tokenizer,
    bool is_multilingual,
    bool is_quantized,
  ) {
    return _wire__crate__api__whisper__whisper_client_new(
      port_,
      whisper_model,
      whisper_config,
      whisper_tokenizer,
      is_multilingual,
      is_quantized,
    );
  }

  late final _wire__crate__api__whisper__whisper_client_newPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Int64,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<wire_cst_list_prim_u_8_strict>,
        ffi.Pointer<wire_cst_list_prim_u_8_loose>,
        ffi.Bool,
        ffi.Bool,
      )
    >
  >('frbgen_fl_caption_wire__crate__api__whisper__whisper_client_new');
  late final _wire__crate__api__whisper__whisper_client_new =
      _wire__crate__api__whisper__whisper_client_newPtr
          .asFunction<
            void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>,
              bool,
              bool,
            )
          >();

  ffi.Pointer<ffi.Bool> cst_new_box_autoadd_bool(bool value) {
    return _cst_new_box_autoadd_bool(value);
  }

  late final _cst_new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
        'frbgen_fl_caption_cst_new_box_autoadd_bool',
      );
  late final _cst_new_box_autoadd_bool =
      _cst_new_box_autoadd_boolPtr
          .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Float> cst_new_box_autoadd_f_32(double value) {
    return _cst_new_box_autoadd_f_32(value);
  }

  late final _cst_new_box_autoadd_f_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>(
        'frbgen_fl_caption_cst_new_box_autoadd_f_32',
      );
  late final _cst_new_box_autoadd_f_32 =
      _cst_new_box_autoadd_f_32Ptr
          .asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(int value) {
    return _cst_new_box_autoadd_u_32(value);
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
        'frbgen_fl_caption_cst_new_box_autoadd_u_32',
      );
  late final _cst_new_box_autoadd_u_32 =
      _cst_new_box_autoadd_u_32Ptr
          .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(int value) {
    return _cst_new_box_autoadd_u_64(value);
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
        'frbgen_fl_caption_cst_new_box_autoadd_u_64',
      );
  late final _cst_new_box_autoadd_u_64 =
      _cst_new_box_autoadd_u_64Ptr
          .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.UintPtr> cst_new_box_autoadd_usize(int value) {
    return _cst_new_box_autoadd_usize(value);
  }

  late final _cst_new_box_autoadd_usizePtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>
  >('frbgen_fl_caption_cst_new_box_autoadd_usize');
  late final _cst_new_box_autoadd_usize =
      _cst_new_box_autoadd_usizePtr
          .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_cst_whisper_client> cst_new_box_autoadd_whisper_client() {
    return _cst_new_box_autoadd_whisper_client();
  }

  late final _cst_new_box_autoadd_whisper_clientPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<wire_cst_whisper_client> Function()>
  >('frbgen_fl_caption_cst_new_box_autoadd_whisper_client');
  late final _cst_new_box_autoadd_whisper_client =
      _cst_new_box_autoadd_whisper_clientPtr
          .asFunction<ffi.Pointer<wire_cst_whisper_client> Function()>();

  ffi.Pointer<wire_cst_list_prim_u_32_strict> cst_new_list_prim_u_32_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_32_strict(len);
  }

  late final _cst_new_list_prim_u_32_strictPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<wire_cst_list_prim_u_32_strict> Function(ffi.Int32)
    >
  >('frbgen_fl_caption_cst_new_list_prim_u_32_strict');
  late final _cst_new_list_prim_u_32_strict =
      _cst_new_list_prim_u_32_strictPtr
          .asFunction<
            ffi.Pointer<wire_cst_list_prim_u_32_strict> Function(int)
          >();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(len);
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(ffi.Int32)
    >
  >('frbgen_fl_caption_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose =
      _cst_new_list_prim_u_8_loosePtr
          .asFunction<
            ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)
          >();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(len);
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)
    >
  >('frbgen_fl_caption_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict =
      _cst_new_list_prim_u_8_strictPtr
          .asFunction<
            ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)
          >();

  ffi.Pointer<wire_cst_list_segment> cst_new_list_segment(int len) {
    return _cst_new_list_segment(len);
  }

  late final _cst_new_list_segmentPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<wire_cst_list_segment> Function(ffi.Int32)>
  >('frbgen_fl_caption_cst_new_list_segment');
  late final _cst_new_list_segment =
      _cst_new_list_segmentPtr
          .asFunction<ffi.Pointer<wire_cst_list_segment> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
        'dummy_method_to_enforce_bundling',
      );
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPort = ffi.Int64;
typedef DartDartPort = int;
typedef DartPostCObjectFnTypeFunction =
    ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction =
    bool Function(DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPostCObjectFnType =
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_whisper_client extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> whisper_model;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> whisper_config;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> whisper_tokenizer;

  @ffi.Bool()
  external bool is_multilingual;

  @ffi.Bool()
  external bool is_quantized;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_u_32_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_decoding_result extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_32_strict> tokens;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> text;

  @ffi.Double()
  external double avg_logprob;

  @ffi.Double()
  external double no_speech_prob;

  @ffi.Double()
  external double temperature;

  @ffi.Double()
  external double compression_ratio;
}

final class wire_cst_segment extends ffi.Struct {
  @ffi.Double()
  external double start;

  @ffi.Double()
  external double duration;

  external wire_cst_decoding_result dr;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> reasoning_duration;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> reasoning_lang;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> audio_duration;

  @ffi.Int32()
  external int status;
}

final class wire_cst_list_segment extends ffi.Struct {
  external ffi.Pointer<wire_cst_segment> ptr;

  @ffi.Int32()
  external int len;
}
