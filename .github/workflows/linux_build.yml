name: "Linux Build"
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Free up disk space
        run: |
          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="
          
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          # Remove packages that are confirmed to exist based on the output
          sudo apt-get remove -y --purge \
            azure-cli \
            google-cloud-cli \
            google-chrome-stable \
            firefox \
            powershell \
            microsoft-edge-stable \
            temurin-8-jdk \
            temurin-11-jdk \
            temurin-17-jdk \
            temurin-21-jdk \
            mysql-server-core-8.0 \
            mysql-client-core-8.0 \
            postgresql-16 \
            snapd \
            containerd.io \
            docker-ce \
            docker-ce-cli \
            podman \
            buildah \
            skopeo \
            kubectl \
            gh \
            llvm-16-dev \
            llvm-17-dev \
            llvm-18-dev \
            llvm-16 \
            llvm-17 \
            llvm-18 \
            libllvm16t64 \
            libllvm17t64 \
            libllvm18 \
            libllvm19 \
            || true
          
          # Remove dotnet packages
          sudo apt-get remove -y --purge \
            dotnet-sdk-8.0 \
            dotnet-runtime-8.0 \
            dotnet-targeting-pack-8.0 \
            aspnetcore-runtime-8.0 \
            aspnetcore-targeting-pack-8.0 \
            netstandard-targeting-pack-2.1-8.0 \
            || true
          
          # Remove additional development tools we don't need
          sudo apt-get remove -y --purge \
            mercurial-common \
            ruby3.2-doc \
            python-babel-localedata \
            vim-runtime \
            shellcheck \
            clang-tidy-16 \
            clang-tidy-17 \
            clang-tidy-18 \
            clang-tools-16 \
            clang-tools-17 \
            clang-tools-18 \
            mecab-ipadic \
            || true
          
          df -h
          echo "Removing large directories"
          # Remove large directories
          sudo rm -rf /usr/share/dotnet/ || true
          sudo rm -rf /usr/local/share/powershell || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo rm -rf /usr/share/swift || true
          sudo rm -rf /usr/local/graalvm || true
          sudo rm -rf /usr/local/share/boost || true
          sudo rm -rf /usr/local/share/vcpkg || true
          sudo rm -rf /usr/local/share/chromium || true
          sudo rm -rf /usr/share/gradle || true
          
          df -h
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          
          # Core build tools (essential)
          sudo apt-get install -y \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libgtk-3-dev \
            liblzma-dev \
            libstdc++-12-dev
          
          # Audio libraries (with error tolerance)
          sudo apt-get install -y \
            libpipewire-0.3-dev \
            libspa-0.2-dev \
            pipewire-audio-client-libraries \
            pipewire \
            wireplumber \
            libasound2-dev \
            libpulse-dev \
            libjack-jackd2-dev \
            || true
          
          # System libraries (with error tolerance)
          sudo apt-get install -y \
            libssl-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            || true
          
          # X11 libraries (with error tolerance)
          sudo apt-get install -y \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxss-dev \
            libglu1-mesa-dev \
            libxmu-dev \
            libxpm-dev \
            libxaw7-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxfixes-dev \
            libxext-dev \
            libx11-dev \
            libxrender-dev \
            libxft-dev \
            || true
          
          # Desktop integration libraries (with error tolerance)
          sudo apt-get install -y \
            libappindicator3-dev \
            libayatana-appindicator3-dev \
            libdbus-1-dev \
            libnotify-dev \
            libsecret-1-dev \
            libkeybinder-3.0-dev \
            || true
          
          # LLVM/Clang support libraries (with error tolerance)
          sudo apt-get install -y \
            libtinfo6 \
            || true

      - name: Install libtinfo5 and libncurses5-dev manually
        run: |
          # Download and install libtinfo5
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install -y ./libtinfo5_6.3-2ubuntu0.1_amd64.deb

          # Clean up downloaded packages
          rm -f *.deb
          
          # Verify installation
          dpkg -l | grep -E "(libtinfo5|libncurses5-dev)"

      - name: Clean up after package installation
        run: |
          sudo apt-get autoremove -y
          sudo apt-get clean
            
      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: '12.4.0'

      - name: Display CUDA Version
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"

      - name: Display CUDA Install Location
        run: |
          echo "Cuda install location is: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"

      - name: Test NVCC
        run: nvcc -V

      - name: Set CUDA Compute Capability
        run: echo "CUDA_COMPUTE_CAP=61" >> $GITHUB_ENV
            
      - name: Check System Information
        run: |
          echo "User: $USER"
          echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "========== System Information =========="
          uname -a
          echo "GCC version:"
          gcc --version
          echo "Clang version:"
          clang --version
          echo "CMake version:"
          cmake --version
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
      - run: flutter --version

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Version
        run: |
          rustup --version  
          cargo --version
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust"
          cache-all-crates: true

      - name: Set up LLVM
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "18"

      - name: Flutter pub get
        run: flutter pub get
      - name: Flutter build runner
        run: dart run build_runner build --delete-conflicting-outputs
      - name: Rust cargo update
        run: cargo update
        working-directory: rust

      - name: Set up Flutter rust bridge
        run: |
          cargo install cargo-expand 
          cargo install 'flutter_rust_bridge_codegen'
      - name: Flutter Rust bridge generate
        run: flutter_rust_bridge_codegen generate
      #      - name: flutter gen l10n
      #        run: |
      #          flutter pub global activate intl_utils
      #          flutter pub global run intl_utils:generate

      - name: Build With Nvidia
        run: scripts/build_linux.sh "true"
        env:
          ENABLE_NVIDIA: "true"

      - name: Archive build with Nvidia
        uses: actions/upload-artifact@v4
        with:
          name: fl_caption_linux(NVIDIA)
          path: build/linux/x64/release/bundle_with_cuda

      - name: Build Without Nvidia
        run: |
          rm -rf build
          scripts/build_linux.sh "false"
        env:
          ENABLE_NVIDIA: "false"

      - name: Archive build without Nvidia
        uses: actions/upload-artifact@v4
        with:
          name: fl_caption_linux
          path: build/linux/x64/release/bundle_without_cuda
